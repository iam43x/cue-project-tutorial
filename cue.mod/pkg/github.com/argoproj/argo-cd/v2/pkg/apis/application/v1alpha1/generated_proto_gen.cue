// This file was autogenerated by go-to-protobuf. Do not edit it manually!
package v1alpha1

import (
	"k8s.io/apimachinery/pkg/apis/meta/v1"
	v1_1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	"k8s.io/apimachinery/pkg/util/intstr"
	"k8s.io/apimachinery/pkg/runtime"
	v1_8 "k8s.io/api/core/v1"
)

// AWSAuthConfig is an AWS IAM authentication configuration
#AWSAuthConfig: {
	// ClusterName contains AWS cluster name
	clusterName?: string @protobuf(1,string)

	// RoleARN contains optional role ARN. If set then AWS IAM Authenticator assume a role to perform cluster operations instead of the default AWS credential provider chain.
	roleARN?: string @protobuf(2,string)

	// Profile contains optional role ARN. If set then AWS IAM Authenticator uses the profile to perform cluster operations instead of the default AWS credential provider chain.
	profile?: string @protobuf(3,string)
}

// AppProject provides a logical grouping of applications, providing controls for:
// * where the apps may deploy to (cluster whitelist)
// * what may be deployed (repository whitelist, resource whitelist/blacklist)
// * who can access these applications (roles, OIDC group claims bindings)
// * and what they can do (RBAC policies)
// * automation access to these roles (JWT tokens)
// +genclient
// +genclient:noStatus
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:path=appprojects,shortName=appproj;appprojs
#AppProject: {
	v1.#TypeMeta
	metadata?: v1.#ObjectMeta    @protobuf(1,.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta)
	spec?:     #AppProjectSpec   @protobuf(2,AppProjectSpec)
	status?:   #AppProjectStatus @protobuf(3,AppProjectStatus)
}

// AppProjectList is list of AppProject resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#AppProjectList: {
	metadata?: v1.#ListMeta @protobuf(1,.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)
	items?: [...#AppProject] @protobuf(2,AppProject)
}

// AppProjectSpec is the specification of an AppProject
#AppProjectSpec: {
	// SourceRepos contains list of repository URLs which can be used for deployment
	sourceRepos?: [...string] @protobuf(1,string)

	// Destinations contains list of destinations available for deployment
	destinations?: [...#ApplicationDestination] @protobuf(2,ApplicationDestination)

	// Description contains optional project description
	description?: string @protobuf(3,string)

	// Roles are user defined RBAC roles associated with this project
	roles?: [...#ProjectRole] @protobuf(4,ProjectRole)

	// ClusterResourceWhitelist contains list of whitelisted cluster level resources
	clusterResourceWhitelist?: [...v1.#GroupKind] @protobuf(5,.k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind)

	// NamespaceResourceBlacklist contains list of blacklisted namespace level resources
	namespaceResourceBlacklist?: [...v1.#GroupKind] @protobuf(6,.k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind)

	// OrphanedResources specifies if controller should monitor orphaned resources of apps in this project
	orphanedResources?: #OrphanedResourcesMonitorSettings @protobuf(7,OrphanedResourcesMonitorSettings)

	// SyncWindows controls when syncs can be run for apps in this project
	syncWindows?: [...#SyncWindow] @protobuf(8,SyncWindow)

	// NamespaceResourceWhitelist contains list of whitelisted namespace level resources
	namespaceResourceWhitelist?: [...v1.#GroupKind] @protobuf(9,.k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind)

	// SignatureKeys contains a list of PGP key IDs that commits in Git must be signed with in order to be allowed for sync
	signatureKeys?: [...#SignatureKey] @protobuf(10,SignatureKey)

	// ClusterResourceBlacklist contains list of blacklisted cluster level resources
	clusterResourceBlacklist?: [...v1.#GroupKind] @protobuf(11,.k8s.io.apimachinery.pkg.apis.meta.v1.GroupKind)

	// SourceNamespaces defines the namespaces application resources are allowed to be created in
	sourceNamespaces?: [...string] @protobuf(12,string)

	// PermitOnlyProjectScopedClusters determines whether destinations can only reference clusters which are project-scoped
	permitOnlyProjectScopedClusters?: bool @protobuf(13,bool)

	// DestinationServiceAccounts holds information about the service accounts to be impersonated for the application sync operation for each destination.
	destinationServiceAccounts?: [...#ApplicationDestinationServiceAccount] @protobuf(14,ApplicationDestinationServiceAccount)
}

// AppProjectStatus contains status information for AppProject CRs
#AppProjectStatus: {
	// JWTTokensByRole contains a list of JWT tokens issued for a given role
	jwtTokensByRole?: {
		[string]: #JWTTokens
	} @protobuf(1,map[string]JWTTokens)
}

// Application is a definition of Application resource.
// +genclient
// +genclient:noStatus
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:path=applications,shortName=app;apps
// +kubebuilder:printcolumn:name="Sync Status",type=string,JSONPath=`.status.sync.status`
// +kubebuilder:printcolumn:name="Health Status",type=string,JSONPath=`.status.health.status`
// +kubebuilder:printcolumn:name="Revision",type=string,JSONPath=`.status.sync.revision`,priority=10
// +kubebuilder:printcolumn:name="Project",type=string,JSONPath=`.spec.project`,priority=10
#Application: {
	v1.#TypeMeta
	metadata?:  v1.#ObjectMeta     @protobuf(1,.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta)
	spec?:      #ApplicationSpec   @protobuf(2,ApplicationSpec)
	status?:    #ApplicationStatus @protobuf(3,ApplicationStatus)
	operation?: #Operation         @protobuf(4,Operation)
}

// ApplicationCondition contains details about an application condition, which is usually an error or warning
#ApplicationCondition: {
	// Type is an application condition type
	type?: string @protobuf(1,string)

	// Message contains human-readable message indicating details about condition
	message?: string @protobuf(2,string)

	// LastTransitionTime is the time the condition was last observed
	lastTransitionTime?: v1.#Time @protobuf(3,.k8s.io.apimachinery.pkg.apis.meta.v1.Time)
}

// ApplicationDestination holds information about the application's destination
#ApplicationDestination: {
	// Server specifies the URL of the target cluster's Kubernetes control plane API. This must be set if Name is not set.
	server?: string @protobuf(1,string)

	// Namespace specifies the target namespace for the application's resources.
	// The namespace will only be set for namespace-scoped resources that have not set a value for .metadata.namespace
	namespace?: string @protobuf(2,string)

	// Name is an alternate way of specifying the target cluster by its symbolic name. This must be set if Server is not set.
	name?: string @protobuf(3,string)
}

// ApplicationDestinationServiceAccount holds information about the service account to be impersonated for the application sync operation.
#ApplicationDestinationServiceAccount: {
	// Server specifies the URL of the target cluster's Kubernetes control plane API.
	server?: string @protobuf(1,string)

	// Namespace specifies the target namespace for the application's resources.
	namespace?: string @protobuf(2,string)

	// DefaultServiceAccount to be used for impersonation during the sync operation
	defaultServiceAccount?: string @protobuf(3,string)
}

// ApplicationList is list of Application resources
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
#ApplicationList: {
	metadata?: v1.#ListMeta @protobuf(1,.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)
	items?: [...#Application] @protobuf(2,Application)
}

#ApplicationMatchExpression: {
	key?:      string @protobuf(1,string)
	operator?: string @protobuf(2,string)
	values?: [...string] @protobuf(3,string)
}

#ApplicationPreservedFields: {
	annotations?: [...string] @protobuf(1,string)
	labels?: [...string] @protobuf(2,string)
}

// ApplicationSet is a set of Application resources
// +genclient
// +genclient:noStatus
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:resource:path=applicationsets,shortName=appset;appsets
// +kubebuilder:subresource:status
#ApplicationSet: {
	v1.#TypeMeta
	metadata?: v1.#ObjectMeta        @protobuf(1,.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta)
	spec?:     #ApplicationSetSpec   @protobuf(2,ApplicationSetSpec)
	status?:   #ApplicationSetStatus @protobuf(3,ApplicationSetStatus)
}

// ApplicationSetApplicationStatus contains details about each Application managed by the ApplicationSet
#ApplicationSetApplicationStatus: {
	// Application contains the name of the Application resource
	application?: string @protobuf(1,string)

	// LastTransitionTime is the time the status was last updated
	lastTransitionTime?: v1.#Time @protobuf(2,.k8s.io.apimachinery.pkg.apis.meta.v1.Time)

	// Message contains human-readable message indicating details about the status
	message?: string @protobuf(3,string)

	// Status contains the AppSet's perceived status of the managed Application resource: (Waiting, Pending, Progressing, Healthy)
	status?: string @protobuf(4,string)

	// Step tracks which step this Application should be updated in
	step?: string @protobuf(5,string)

	// TargetRevision tracks the desired revisions the Application should be synced to.
	targetrevisions?: [...string] @protobuf(6,string)
}

// ApplicationSetCondition contains details about an applicationset condition, which is usually an error or warning
#ApplicationSetCondition: {
	// Type is an applicationset condition type
	type?: string @protobuf(1,string)

	// Message contains human-readable message indicating details about condition
	message?: string @protobuf(2,string)

	// LastTransitionTime is the time the condition was last observed
	lastTransitionTime?: v1.#Time @protobuf(3,.k8s.io.apimachinery.pkg.apis.meta.v1.Time)

	// True/False/Unknown
	status?: string @protobuf(4,string)

	// Single word camelcase representing the reason for the status eg ErrorOccurred
	reason?: string @protobuf(5,string)
}

// ApplicationSetGenerator represents a generator at the top level of an ApplicationSet.
#ApplicationSetGenerator: {
	list?:                    #ListGenerator        @protobuf(1,ListGenerator)
	clusters?:                #ClusterGenerator     @protobuf(2,ClusterGenerator)
	git?:                     #GitGenerator         @protobuf(3,GitGenerator)
	scmProvider?:             #SCMProviderGenerator @protobuf(4,SCMProviderGenerator)
	clusterDecisionResource?: #DuckTypeGenerator    @protobuf(5,DuckTypeGenerator)
	pullRequest?:             #PullRequestGenerator @protobuf(6,PullRequestGenerator)
	matrix?:                  #MatrixGenerator      @protobuf(7,MatrixGenerator)
	merge?:                   #MergeGenerator       @protobuf(8,MergeGenerator)

	// Selector allows to post-filter all generator.
	selector?: v1.#LabelSelector @protobuf(9,.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector)
	plugin?:   #PluginGenerator  @protobuf(10,PluginGenerator)
}

// ApplicationSetList contains a list of ApplicationSet
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
#ApplicationSetList: {
	metadata?: v1.#ListMeta @protobuf(1,.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)
	items?: [...#ApplicationSet] @protobuf(2,ApplicationSet)
}

// ApplicationSetNestedGenerator represents a generator nested within a combination-type generator (MatrixGenerator or
// MergeGenerator).
#ApplicationSetNestedGenerator: {
	list?:                    #ListGenerator        @protobuf(1,ListGenerator)
	clusters?:                #ClusterGenerator     @protobuf(2,ClusterGenerator)
	git?:                     #GitGenerator         @protobuf(3,GitGenerator)
	scmProvider?:             #SCMProviderGenerator @protobuf(4,SCMProviderGenerator)
	clusterDecisionResource?: #DuckTypeGenerator    @protobuf(5,DuckTypeGenerator)
	pullRequest?:             #PullRequestGenerator @protobuf(6,PullRequestGenerator)

	// Matrix should have the form of NestedMatrixGenerator
	matrix?: v1_1.#JSON @protobuf(7,.k8s.io.apiextensions_apiserver.pkg.apis.apiextensions.v1.JSON)

	// Merge should have the form of NestedMergeGenerator
	merge?: v1_1.#JSON @protobuf(8,.k8s.io.apiextensions_apiserver.pkg.apis.apiextensions.v1.JSON)

	// Selector allows to post-filter all generator.
	selector?: v1.#LabelSelector @protobuf(9,.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector)
	plugin?:   #PluginGenerator  @protobuf(10,PluginGenerator)
}

// ApplicationSetResourceIgnoreDifferences configures how the ApplicationSet controller will ignore differences in live
// applications when applying changes from generated applications.
#ApplicationSetResourceIgnoreDifferences: {
	// Name is the name of the application to ignore differences for. If not specified, the rule applies to all applications.
	name?: string @protobuf(1,string)

	// JSONPointers is a list of JSON pointers to fields to ignore differences for.
	jsonPointers?: [...string] @protobuf(2,string)

	// JQPathExpressions is a list of JQ path expressions to fields to ignore differences for.
	jqPathExpressions?: [...string] @protobuf(3,string)
}

#ApplicationSetRolloutStep: {
	matchExpressions?: [...#ApplicationMatchExpression] @protobuf(1,ApplicationMatchExpression)
	maxUpdate?: intstr.#IntOrString @protobuf(2,.k8s.io.apimachinery.pkg.util.intstr.IntOrString)
}

#ApplicationSetRolloutStrategy: {
	steps?: [...#ApplicationSetRolloutStep] @protobuf(1,ApplicationSetRolloutStep)
}

// ApplicationSetSpec represents a class of application set state.
#ApplicationSetSpec: {
	goTemplate?: bool @protobuf(1,bool)
	generators?: [...#ApplicationSetGenerator] @protobuf(2,ApplicationSetGenerator)
	template?:        #ApplicationSetTemplate     @protobuf(3,ApplicationSetTemplate)
	syncPolicy?:      #ApplicationSetSyncPolicy   @protobuf(4,ApplicationSetSyncPolicy)
	strategy?:        #ApplicationSetStrategy     @protobuf(5,ApplicationSetStrategy)
	preservedFields?: #ApplicationPreservedFields @protobuf(6,ApplicationPreservedFields)
	goTemplateOptions?: [...string] @protobuf(7,string)

	// ApplyNestedSelectors enables selectors defined within the generators of two level-nested matrix or merge generators
	applyNestedSelectors?: bool @protobuf(8,bool)
	ignoreApplicationDifferences?: [...#ApplicationSetResourceIgnoreDifferences] @protobuf(9,ApplicationSetResourceIgnoreDifferences)
	templatePatch?: string @protobuf(10,string)
}

// ApplicationSetStatus defines the observed state of ApplicationSet
#ApplicationSetStatus: {
	// INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
	// Important: Run "make" to regenerate code after modifying this file
	conditions?: [...#ApplicationSetCondition] @protobuf(1,ApplicationSetCondition)
	applicationStatus?: [...#ApplicationSetApplicationStatus] @protobuf(2,ApplicationSetApplicationStatus)

	// Resources is a list of Applications resources managed by this application set.
	resources?: [...#ResourceStatus] @protobuf(3,ResourceStatus)
}

// ApplicationSetStrategy configures how generated Applications are updated in sequence.
#ApplicationSetStrategy: {
	type?:        string                         @protobuf(1,string)
	rollingSync?: #ApplicationSetRolloutStrategy @protobuf(2,ApplicationSetRolloutStrategy)
}

// ApplicationSetSyncPolicy configures how generated Applications will relate to their
// ApplicationSet.
#ApplicationSetSyncPolicy: {
	// PreserveResourcesOnDeletion will preserve resources on deletion. If PreserveResourcesOnDeletion is set to true, these Applications will not be deleted.
	preserveResourcesOnDeletion?: bool @protobuf(1,bool)

	// ApplicationsSync represents the policy applied on the generated applications. Possible values are create-only, create-update, create-delete, sync
	// +kubebuilder:validation:Optional
	// +kubebuilder:validation:Enum=create-only;create-update;create-delete;sync
	applicationsSync?: string @protobuf(2,string)
}

// ApplicationSetTemplate represents argocd ApplicationSpec
#ApplicationSetTemplate: {
	metadata?: #ApplicationSetTemplateMeta @protobuf(1,ApplicationSetTemplateMeta)
	spec?:     #ApplicationSpec            @protobuf(2,ApplicationSpec)
}

// ApplicationSetTemplateMeta represents the Argo CD application fields that may
// be used for Applications generated from the ApplicationSet (based on metav1.ObjectMeta)
#ApplicationSetTemplateMeta: {
	name?:      string @protobuf(1,string)
	namespace?: string @protobuf(2,string)
	labels?: {
		[string]: string
	} @protobuf(3,map[string]string)
	annotations?: {
		[string]: string
	} @protobuf(4,map[string]string)
	finalizers?: [...string] @protobuf(5,string)
}

// ApplicationSetTerminalGenerator represents a generator nested within a nested generator (for example, a list within
// a merge within a matrix). A generator at this level may not be a combination-type generator (MatrixGenerator or
// MergeGenerator). ApplicationSet enforces this nesting depth limit because CRDs do not support recursive types.
// https://github.com/kubernetes-sigs/controller-tools/issues/477
#ApplicationSetTerminalGenerator: {
	list?:                    #ListGenerator        @protobuf(1,ListGenerator)
	clusters?:                #ClusterGenerator     @protobuf(2,ClusterGenerator)
	git?:                     #GitGenerator         @protobuf(3,GitGenerator)
	scmProvider?:             #SCMProviderGenerator @protobuf(4,SCMProviderGenerator)
	clusterDecisionResource?: #DuckTypeGenerator    @protobuf(5,DuckTypeGenerator)
	pullRequest?:             #PullRequestGenerator @protobuf(6,PullRequestGenerator)
	plugin?:                  #PluginGenerator      @protobuf(7,PluginGenerator)

	// Selector allows to post-filter all generator.
	selector?: v1.#LabelSelector @protobuf(8,.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector)
}

// ApplicationSetTree holds nodes which belongs to the application
// Used to build a tree of an ApplicationSet and its children
#ApplicationSetTree: {
	// Nodes contains list of nodes which are directly managed by the applicationset
	nodes?: [...#ResourceNode] @protobuf(1,ResourceNode)
}

// ApplicationSource contains all required information about the source of an application
#ApplicationSource: {
	// RepoURL is the URL to the repository (Git or Helm) that contains the application manifests
	repoURL?: string @protobuf(1,string)

	// Path is a directory path within the Git repository, and is only valid for applications sourced from Git.
	path?: string @protobuf(2,string)

	// TargetRevision defines the revision of the source to sync the application to.
	// In case of Git, this can be commit, tag, or branch. If omitted, will equal to HEAD.
	// In case of Helm, this is a semver tag for the Chart's version.
	targetRevision?: string @protobuf(4,string)

	// Helm holds helm specific options
	helm?: #ApplicationSourceHelm @protobuf(7,ApplicationSourceHelm)

	// Kustomize holds kustomize specific options
	kustomize?: #ApplicationSourceKustomize @protobuf(8,ApplicationSourceKustomize)

	// Directory holds path/directory specific options
	directory?: #ApplicationSourceDirectory @protobuf(10,ApplicationSourceDirectory)

	// Plugin holds config management plugin specific options
	plugin?: #ApplicationSourcePlugin @protobuf(11,ApplicationSourcePlugin)

	// Chart is a Helm chart name, and must be specified for applications sourced from a Helm repo.
	chart?: string @protobuf(12,string)

	// Ref is reference to another source within sources field. This field will not be used if used with a `source` tag.
	ref?: string @protobuf(13,string)
}

// ApplicationSourceDirectory holds options for applications of type plain YAML or Jsonnet
#ApplicationSourceDirectory: {
	// Recurse specifies whether to scan a directory recursively for manifests
	recurse?: bool @protobuf(1,bool)

	// Jsonnet holds options specific to Jsonnet
	jsonnet?: #ApplicationSourceJsonnet @protobuf(2,ApplicationSourceJsonnet)

	// Exclude contains a glob pattern to match paths against that should be explicitly excluded from being used during manifest generation
	exclude?: string @protobuf(3,string)

	// Include contains a glob pattern to match paths against that should be explicitly included during manifest generation
	include?: string @protobuf(4,string)
}

// ApplicationSourceHelm holds helm specific options
#ApplicationSourceHelm: {
	// ValuesFiles is a list of Helm value files to use when generating a template
	valueFiles?: [...string] @protobuf(1,string)

	// Parameters is a list of Helm parameters which are passed to the helm template command upon manifest generation
	parameters?: [...#HelmParameter] @protobuf(2,HelmParameter)

	// ReleaseName is the Helm release name to use. If omitted it will use the application name
	releaseName?: string @protobuf(3,string)

	// Values specifies Helm values to be passed to helm template, typically defined as a block. ValuesObject takes precedence over Values, so use one or the other.
	// +patchStrategy=replace
	values?: string @protobuf(4,string)

	// FileParameters are file parameters to the helm template
	fileParameters?: [...#HelmFileParameter] @protobuf(5,HelmFileParameter)

	// Version is the Helm version to use for templating ("3")
	version?: string @protobuf(6,string)

	// PassCredentials pass credentials to all domains (Helm's --pass-credentials)
	passCredentials?: bool @protobuf(7,bool)

	// IgnoreMissingValueFiles prevents helm template from failing when valueFiles do not exist locally by not appending them to helm template --values
	ignoreMissingValueFiles?: bool @protobuf(8,bool)

	// SkipCrds skips custom resource definition installation step (Helm's --skip-crds)
	skipCrds?: bool @protobuf(9,bool)

	// ValuesObject specifies Helm values to be passed to helm template, defined as a map. This takes precedence over Values.
	// +kubebuilder:pruning:PreserveUnknownFields
	valuesObject?: runtime.#RawExtension @protobuf(10,.k8s.io.apimachinery.pkg.runtime.RawExtension)

	// Namespace is an optional namespace to template with. If left empty, defaults to the app's destination namespace.
	namespace?: string @protobuf(11,string)

	// KubeVersion specifies the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD
	// uses the Kubernetes version of the target cluster.
	kubeVersion?: string @protobuf(12,string)

	// APIVersions specifies the Kubernetes resource API versions to pass to Helm when templating manifests. By default,
	// Argo CD uses the API versions of the target cluster. The format is [group/]version/kind.
	apiVersions?: [...string] @protobuf(13,string)
}

// ApplicationSourceJsonnet holds options specific to applications of type Jsonnet
#ApplicationSourceJsonnet: {
	// ExtVars is a list of Jsonnet External Variables
	extVars?: [...#JsonnetVar] @protobuf(1,JsonnetVar)

	// TLAS is a list of Jsonnet Top-level Arguments
	tlas?: [...#JsonnetVar] @protobuf(2,JsonnetVar)

	// Additional library search dirs
	libs?: [...string] @protobuf(3,string)
}

// ApplicationSourceKustomize holds options specific to an Application source specific to Kustomize
#ApplicationSourceKustomize: {
	// NamePrefix is a prefix appended to resources for Kustomize apps
	namePrefix?: string @protobuf(1,string)

	// NameSuffix is a suffix appended to resources for Kustomize apps
	nameSuffix?: string @protobuf(2,string)

	// Images is a list of Kustomize image override specifications
	images?: [...string] @protobuf(3,string)

	// CommonLabels is a list of additional labels to add to rendered manifests
	commonLabels?: {
		[string]: string
	} @protobuf(4,map[string]string)

	// Version controls which version of Kustomize to use for rendering manifests
	version?: string @protobuf(5,string)

	// CommonAnnotations is a list of additional annotations to add to rendered manifests
	commonAnnotations?: {
		[string]: string
	} @protobuf(6,map[string]string)

	// ForceCommonLabels specifies whether to force applying common labels to resources for Kustomize apps
	forceCommonLabels?: bool @protobuf(7,bool)

	// ForceCommonAnnotations specifies whether to force applying common annotations to resources for Kustomize apps
	forceCommonAnnotations?: bool @protobuf(8,bool)

	// Namespace sets the namespace that Kustomize adds to all resources
	namespace?: string @protobuf(9,string)

	// CommonAnnotationsEnvsubst specifies whether to apply env variables substitution for annotation values
	commonAnnotationsEnvsubst?: bool @protobuf(10,bool)

	// Replicas is a list of Kustomize Replicas override specifications
	replicas?: [...#KustomizeReplica] @protobuf(11,KustomizeReplica)

	// Patches is a list of Kustomize patches
	patches?: [...#KustomizePatch] @protobuf(12,KustomizePatch)

	// Components specifies a list of kustomize components to add to the kustomization before building
	components?: [...string] @protobuf(13,string)

	// LabelWithoutSelector specifies whether to apply common labels to resource selectors or not
	labelWithoutSelector?: bool @protobuf(14,bool)

	// KubeVersion specifies the Kubernetes API version to pass to Helm when templating manifests. By default, Argo CD
	// uses the Kubernetes version of the target cluster.
	kubeVersion?: string @protobuf(15,string)

	// APIVersions specifies the Kubernetes resource API versions to pass to Helm when templating manifests. By default,
	// Argo CD uses the API versions of the target cluster. The format is [group/]version/kind.
	apiVersions?: [...string] @protobuf(16,string)
}

// ApplicationSourcePlugin holds options specific to config management plugins
#ApplicationSourcePlugin: {
	name?: string @protobuf(1,string)
	env?: [...#EnvEntry] @protobuf(2,EnvEntry)
	parameters?: [...#ApplicationSourcePluginParameter] @protobuf(3,ApplicationSourcePluginParameter)
}

#ApplicationSourcePluginParameter: {
	// Name is the name identifying a parameter.
	name?: string_5 @protobuf(1,string)

	// String_ is the value of a string type parameter.
	string?: string_A @protobuf(5,string)

	// Map is the value of a map type parameter.
	map?: #OptionalMap @protobuf(3,OptionalMap)

	// Array is the value of an array type parameter.
	array?: #OptionalArray @protobuf(4,OptionalArray)
}

// ApplicationSpec represents desired application state. Contains link to repository with application definition and additional parameters link definition revision.
#ApplicationSpec: {
	// Source is a reference to the location of the application's manifests or chart
	source?: #ApplicationSource @protobuf(1,ApplicationSource)

	// Destination is a reference to the target Kubernetes server and namespace
	destination?: #ApplicationDestination @protobuf(2,ApplicationDestination)

	// Project is a reference to the project this application belongs to.
	// The empty string means that application belongs to the 'default' project.
	project?: string @protobuf(3,string)

	// SyncPolicy controls when and how a sync will be performed
	syncPolicy?: #SyncPolicy @protobuf(4,SyncPolicy)

	// IgnoreDifferences is a list of resources and their fields which should be ignored during comparison
	ignoreDifferences?: [...#ResourceIgnoreDifferences] @protobuf(5,ResourceIgnoreDifferences)

	// Info contains a list of information (URLs, email addresses, and plain text) that relates to the application
	info?: [...#Info] @protobuf(6,Info)

	// RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for informational purposes as well as for rollbacks to previous versions.
	// This should only be changed in exceptional circumstances.
	// Setting to zero will store no history. This will reduce storage used.
	// Increasing will increase the space used to store the history, so we do not recommend increasing it.
	// Default is 10.
	revisionHistoryLimit?: int64 @protobuf(7,int64)

	// Sources is a reference to the location of the application's manifests or chart
	sources?: [...#ApplicationSource] @protobuf(8,ApplicationSource)
}

// ApplicationStatus contains status information for the application
#ApplicationStatus: {
	// Resources is a list of Kubernetes resources managed by this application
	resources?: [...#ResourceStatus] @protobuf(1,ResourceStatus)

	// Sync contains information about the application's current sync status
	sync?: #SyncStatus @protobuf(2,SyncStatus)

	// Health contains information about the application's current health status
	health?: #HealthStatus @protobuf(3,HealthStatus)

	// History contains information about the application's sync history
	history?: [...#RevisionHistory] @protobuf(4,RevisionHistory)

	// Conditions is a list of currently observed application conditions
	conditions?: [...#ApplicationCondition] @protobuf(5,ApplicationCondition)

	// ReconciledAt indicates when the application state was reconciled using the latest git version
	reconciledAt?: v1.#Time @protobuf(6,.k8s.io.apimachinery.pkg.apis.meta.v1.Time)

	// OperationState contains information about any ongoing operations, such as a sync
	operationState?: #OperationState @protobuf(7,OperationState)

	// ObservedAt indicates when the application state was updated without querying latest git state
	// Deprecated: controller no longer updates ObservedAt field
	observedAt?: v1.#Time @protobuf(8,.k8s.io.apimachinery.pkg.apis.meta.v1.Time)

	// SourceType specifies the type of this application
	sourceType?: string @protobuf(9,string)

	// Summary contains a list of URLs and container images used by this application
	summary?: #ApplicationSummary @protobuf(10,ApplicationSummary)

	// ResourceHealthSource indicates where the resource health status is stored: inline if not set or appTree
	resourceHealthSource?: string @protobuf(11,string)

	// SourceTypes specifies the type of the sources included in the application
	sourceTypes?: [...string] @protobuf(12,string)

	// ControllerNamespace indicates the namespace in which the application controller is located
	controllerNamespace?: string @protobuf(13,string)
}

// ApplicationSummary contains information about URLs and container images used by an application
#ApplicationSummary: {
	// ExternalURLs holds all external URLs of application child resources.
	externalURLs?: [...string] @protobuf(1,string)

	// Images holds all images of application child resources.
	images?: [...string] @protobuf(2,string)
}

// ApplicationTree holds nodes which belongs to the application
// TODO: describe purpose of this type
#ApplicationTree: {
	// Nodes contains list of nodes which either directly managed by the application and children of directly managed nodes.
	nodes?: [...#ResourceNode] @protobuf(1,ResourceNode)

	// OrphanedNodes contains if or orphaned nodes: nodes which are not managed by the app but in the same namespace. List is populated only if orphaned resources enabled in app project.
	orphanedNodes?: [...#ResourceNode] @protobuf(2,ResourceNode)

	// Hosts holds list of Kubernetes nodes that run application related pods
	hosts?: [...#HostInfo] @protobuf(3,HostInfo)

	// ShardsCount contains total number of shards the application tree is split into
	shardsCount?: int64 @protobuf(4,int64)
}

// ApplicationWatchEvent contains information about application change.
#ApplicationWatchEvent: {
	type?: string @protobuf(1,string)

	// Application is:
	//  * If Type is Added or Modified: the new state of the object.
	//  * If Type is Deleted: the state of the object immediately before deletion.
	//  * If Type is Error: *api.Status is recommended; other types may make sense
	//    depending on context.
	application?: #Application @protobuf(2,Application)
}

// Backoff is the backoff strategy to use on subsequent retries for failing syncs
#Backoff: {
	// Duration is the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
	duration?: string @protobuf(1,string)

	// Factor is a factor to multiply the base duration after each failed retry
	factor?: int64 @protobuf(2,int64)

	// MaxDuration is the maximum amount of time allowed for the backoff strategy
	maxDuration?: string @protobuf(3,string)
}

// BasicAuthBitbucketServer defines the username/(password or personal access token) for Basic auth.
#BasicAuthBitbucketServer: {
	// Username for Basic auth
	username?: string @protobuf(1,string)

	// Password (or personal access token) reference.
	passwordRef?: #SecretRef @protobuf(2,SecretRef)
}

// BearerTokenBitbucket defines the Bearer token for BitBucket AppToken auth.
#BearerTokenBitbucket: {
	// Password (or personal access token) reference.
	tokenRef?: #SecretRef @protobuf(1,SecretRef)
}

// BearerTokenBitbucketCloud defines the Bearer token for BitBucket AppToken auth.
#BearerTokenBitbucketCloud: {
	// Password (or personal access token) reference.
	tokenRef?: #SecretRef @protobuf(1,SecretRef)
}

// ChartDetails contains helm chart metadata for a specific version
#ChartDetails: {
	description?: string @protobuf(1,string)

	// The URL of this projects home page, e.g. "http://example.com"
	home?: string @protobuf(2,string)

	// List of maintainer details, name and email, e.g. ["John Doe <john_doe@my-company.com>"]
	maintainers?: [...string] @protobuf(3,string)
}

// Cluster is the definition of a cluster resource
#Cluster: {
	// Server is the API server URL of the Kubernetes cluster
	server?: string @protobuf(1,string)

	// Name of the cluster. If omitted, will use the server address
	name?: string @protobuf(2,string)

	// Config holds cluster information for connecting to a cluster
	config?: #ClusterConfig @protobuf(3,ClusterConfig)

	// Deprecated: use Info.ConnectionState field instead.
	// ConnectionState contains information about cluster connection state
	connectionState?: #ConnectionState @protobuf(4,ConnectionState)

	// Deprecated: use Info.ServerVersion field instead.
	// The server version
	serverVersion?: string @protobuf(5,string)

	// Holds list of namespaces which are accessible in that cluster. Cluster level resources will be ignored if namespace list is not empty.
	namespaces?: [...string] @protobuf(6,string)

	// RefreshRequestedAt holds time when cluster cache refresh has been requested
	refreshRequestedAt?: v1.#Time @protobuf(7,.k8s.io.apimachinery.pkg.apis.meta.v1.Time)

	// Info holds information about cluster cache and state
	info?: #ClusterInfo @protobuf(8,ClusterInfo)

	// Shard contains optional shard number. Calculated on the fly by the application controller if not specified.
	shard?: int64 @protobuf(9,int64)

	// Indicates if cluster level resources should be managed. This setting is used only if cluster is connected in a namespaced mode.
	clusterResources?: bool @protobuf(10,bool)

	// Reference between project and cluster that allow you automatically to be added as item inside Destinations project entity
	project?: string @protobuf(11,string)

	// Labels for cluster secret metadata
	labels?: {
		[string]: string
	} @protobuf(12,map[string]string)

	// Annotations for cluster secret metadata
	annotations?: {
		[string]: string
	} @protobuf(13,map[string]string)
}

// ClusterCacheInfo contains information about the cluster cache
#ClusterCacheInfo: {
	// ResourcesCount holds number of observed Kubernetes resources
	resourcesCount?: int64 @protobuf(1,int64)

	// APIsCount holds number of observed Kubernetes API count
	apisCount?: int64 @protobuf(2,int64)

	// LastCacheSyncTime holds time of most recent cache synchronization
	lastCacheSyncTime?: v1.#Time @protobuf(3,.k8s.io.apimachinery.pkg.apis.meta.v1.Time)
}

// ClusterConfig is the configuration attributes. This structure is subset of the go-client
// rest.Config with annotations added for marshalling.
#ClusterConfig: {
	// Server requires Basic authentication
	username?: string @protobuf(1,string)
	password?: string @protobuf(2,string)

	// Server requires Bearer authentication. This client will not attempt to use
	// refresh tokens for an OAuth2 flow.
	// TODO: demonstrate an OAuth2 compatible client.
	bearerToken?: string @protobuf(3,string)

	// TLSClientConfig contains settings to enable transport layer security
	tlsClientConfig?: #TLSClientConfig @protobuf(4,TLSClientConfig)

	// AWSAuthConfig contains IAM authentication configuration
	awsAuthConfig?: #AWSAuthConfig @protobuf(5,AWSAuthConfig)

	// ExecProviderConfig contains configuration for an exec provider
	execProviderConfig?: #ExecProviderConfig @protobuf(6,ExecProviderConfig)
}

// ClusterGenerator defines a generator to match against clusters registered with ArgoCD.
#ClusterGenerator: {
	// Selector defines a label selector to match against all clusters registered with ArgoCD.
	// Clusters today are stored as Kubernetes Secrets, thus the Secret labels will be used
	// for matching the selector.
	selector?: v1.#LabelSelector       @protobuf(1,.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector)
	template?: #ApplicationSetTemplate @protobuf(2,ApplicationSetTemplate)

	// Values contains key/value pairs which are passed directly as parameters to the template
	values?: {
		[string]: string
	} @protobuf(3,map[string]string)
}

// ClusterInfo contains information about the cluster
#ClusterInfo: {
	// ConnectionState contains information about the connection to the cluster
	connectionState?: #ConnectionState @protobuf(1,ConnectionState)

	// ServerVersion contains information about the Kubernetes version of the cluster
	serverVersion?: string @protobuf(2,string)

	// CacheInfo contains information about the cluster cache
	cacheInfo?: #ClusterCacheInfo @protobuf(3,ClusterCacheInfo)

	// ApplicationsCount is the number of applications managed by Argo CD on the cluster
	applicationsCount?: int64 @protobuf(4,int64)

	// APIVersions contains list of API versions supported by the cluster
	apiVersions?: [...string] @protobuf(5,string)
}

// ClusterList is a collection of Clusters.
#ClusterList: {
	metadata?: v1.#ListMeta @protobuf(1,.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)
	items?: [...#Cluster] @protobuf(2,Cluster)
}

// Command holds binary path and arguments list
#Command: {
	command?: [...string] @protobuf(1,string)
	args?: [...string] @protobuf(2,string)
}

// ComparedTo contains application source and target which was used for resources comparison
#ComparedTo: {
	// Source is a reference to the application's source used for comparison
	source?: #ApplicationSource @protobuf(1,ApplicationSource)

	// Destination is a reference to the application's destination used for comparison
	destination?: #ApplicationDestination @protobuf(2,ApplicationDestination)

	// Sources is a reference to the application's multiple sources used for comparison
	sources?: [...#ApplicationSource] @protobuf(3,ApplicationSource)

	// IgnoreDifferences is a reference to the application's ignored differences used for comparison
	ignoreDifferences?: [...#ResourceIgnoreDifferences] @protobuf(4,ResourceIgnoreDifferences)
}

// ComponentParameter contains information about component parameter value
#ComponentParameter: {
	component?: string @protobuf(1,string)
	name?:      string @protobuf(2,string)
	value?:     string @protobuf(3,string)
}

// ConfigManagementPlugin contains config management plugin configuration
#ConfigManagementPlugin: {
	name?:     string   @protobuf(1,string)
	init?:     #Command @protobuf(2,Command)
	generate?: #Command @protobuf(3,Command)
	lockRepo?: bool     @protobuf(4,bool)
}

// Utility struct for a reference to a configmap key.
#ConfigMapKeyRef: {
	configMapName?: string @protobuf(1,string)
	key?:           string @protobuf(2,string)
}

// ConnectionState contains information about remote resource connection state, currently used for clusters and repositories
#ConnectionState: {
	// Status contains the current status indicator for the connection
	status?: string @protobuf(1,string)

	// Message contains human readable information about the connection status
	message?: string @protobuf(2,string)

	// ModifiedAt contains the timestamp when this connection status has been determined
	attemptedAt?: v1.#Time @protobuf(3,.k8s.io.apimachinery.pkg.apis.meta.v1.Time)
}

// DuckType defines a generator to match against clusters registered with ArgoCD.
#DuckTypeGenerator: {
	// ConfigMapRef is a ConfigMap with the duck type definitions needed to retrieve the data
	//              this includes apiVersion(group/version), kind, matchKey and validation settings
	// Name is the resource name of the kind, group and version, defined in the ConfigMapRef
	// RequeueAfterSeconds is how long before the duckType will be rechecked for a change
	configMapRef?:        string                  @protobuf(1,string)
	name?:                string                  @protobuf(2,string)
	requeueAfterSeconds?: int64                   @protobuf(3,int64)
	labelSelector?:       v1.#LabelSelector       @protobuf(4,.k8s.io.apimachinery.pkg.apis.meta.v1.LabelSelector)
	template?:            #ApplicationSetTemplate @protobuf(5,ApplicationSetTemplate)

	// Values contains key/value pairs which are passed directly as parameters to the template
	values?: {
		[string]: string
	} @protobuf(6,map[string]string)
}

// EnvEntry represents an entry in the application's environment
#EnvEntry: {
	// Name is the name of the variable, usually expressed in uppercase
	name?: string @protobuf(1,string)

	// Value is the value of the variable
	value?: string @protobuf(2,string)
}

#ErrApplicationNotAllowedToUseProject: {}

// ExecProviderConfig is config used to call an external command to perform cluster authentication
// See: https://godoc.org/k8s.io/client-go/tools/clientcmd/api#ExecConfig
#ExecProviderConfig: {
	// Command to execute
	command?: string @protobuf(1,string)

	// Arguments to pass to the command when executing it
	args?: [...string] @protobuf(2,string)

	// Env defines additional environment variables to expose to the process
	env?: {
		[string]: string
	} @protobuf(3,map[string]string)

	// Preferred input version of the ExecInfo
	apiVersion?: string @protobuf(4,string)

	// This text is shown to the user when the executable doesn't seem to be present
	installHint?: string @protobuf(5,string)
}

#GitDirectoryGeneratorItem: {
	path?:    string @protobuf(1,string)
	exclude?: bool   @protobuf(2,bool)
}

#GitFileGeneratorItem: {
	path?: string @protobuf(1,string)
}

#GitGenerator: {
	repoURL?: string @protobuf(1,string)
	directories?: [...#GitDirectoryGeneratorItem] @protobuf(2,GitDirectoryGeneratorItem)
	files?: [...#GitFileGeneratorItem] @protobuf(3,GitFileGeneratorItem)
	revision?:            string                  @protobuf(4,string)
	requeueAfterSeconds?: int64                   @protobuf(5,int64)
	template?:            #ApplicationSetTemplate @protobuf(6,ApplicationSetTemplate)
	pathParamPrefix?:     string                  @protobuf(7,string)

	// Values contains key/value pairs which are passed directly as parameters to the template
	values?: {
		[string]: string
	} @protobuf(8,map[string]string)
}

// GnuPGPublicKey is a representation of a GnuPG public key
#GnuPGPublicKey: {
	// KeyID specifies the key ID, in hexadecimal string format
	keyID?: string @protobuf(1,string)

	// Fingerprint is the fingerprint of the key
	fingerprint?: string @protobuf(2,string)

	// Owner holds the owner identification, e.g. a name and e-mail address
	owner?: string @protobuf(3,string)

	// Trust holds the level of trust assigned to this key
	trust?: string @protobuf(4,string)

	// SubType holds the key's sub type (e.g. rsa4096)
	subType?: string @protobuf(5,string)

	// KeyData holds the raw key data, in base64 encoded format
	keyData?: string @protobuf(6,string)
}

// GnuPGPublicKeyList is a collection of GnuPGPublicKey objects
#GnuPGPublicKeyList: {
	metadata?: v1.#ListMeta @protobuf(1,.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)
	items?: [...#GnuPGPublicKey] @protobuf(2,GnuPGPublicKey)
}

// HealthStatus contains information about the currently observed health state of an application or resource
#HealthStatus: {
	// Status holds the status code of the application or resource
	status?: string @protobuf(1,string)

	// Message is a human-readable informational message describing the health status
	message?: string @protobuf(2,string)
}

// HelmFileParameter is a file parameter that's passed to helm template during manifest generation
#HelmFileParameter: {
	// Name is the name of the Helm parameter
	name?: string @protobuf(1,string)

	// Path is the path to the file containing the values for the Helm parameter
	path?: string @protobuf(2,string)
}

// HelmOptions holds helm options
#HelmOptions: {
	valuesFileSchemes?: [...string] @protobuf(1,string)
}

// HelmParameter is a parameter that's passed to helm template during manifest generation
#HelmParameter: {
	// Name is the name of the Helm parameter
	name?: string @protobuf(1,string)

	// Value is the value for the Helm parameter
	value?: string @protobuf(2,string)

	// ForceString determines whether to tell Helm to interpret booleans and numbers as strings
	forceString?: bool @protobuf(3,bool)
}

// HostInfo holds host name and resources metrics
// TODO: describe purpose of this type
// TODO: describe members of this type
#HostInfo: {
	name?: string @protobuf(1,string)
	resourcesInfo?: [...#HostResourceInfo] @protobuf(2,HostResourceInfo)
	systemInfo?: v1_8.#NodeSystemInfo @protobuf(3,.k8s.io.api.core.v1.NodeSystemInfo)
}

// TODO: describe this type
#HostResourceInfo: {
	resourceName?:         string @protobuf(1,string)
	requestedByApp?:       int64  @protobuf(2,int64)
	requestedByNeighbors?: int64  @protobuf(3,int64)
	capacity?:             int64  @protobuf(4,int64)
}

#Info: {
	name?:  string @protobuf(1,string)
	value?: string @protobuf(2,string)
}

// InfoItem contains arbitrary, human readable information about an application
#InfoItem: {
	// Name is a human readable title for this piece of information.
	name?: string @protobuf(1,string)

	// Value is human readable content.
	value?: string @protobuf(2,string)
}

// JWTToken holds the issuedAt and expiresAt values of a token
#JWTToken: {
	iat?: int64  @protobuf(1,int64)
	exp?: int64  @protobuf(2,int64)
	id?:  string @protobuf(3,string)
}

// JWTTokens represents a list of JWT tokens
#JWTTokens: {
	items?: [...#JWTToken] @protobuf(1,JWTToken)
}

// JsonnetVar represents a variable to be passed to jsonnet during manifest generation
#JsonnetVar: {
	name?:  string @protobuf(1,string)
	value?: string @protobuf(2,string)
	code?:  bool   @protobuf(3,bool)
}

// KnownTypeField contains mapping between CRD field and known Kubernetes type.
// This is mainly used for unit conversion in unknown resources (e.g. 0.1 == 100mi)
// TODO: Describe the members of this type
#KnownTypeField: {
	field?: string @protobuf(1,string)
	type?:  string @protobuf(2,string)
}

#KustomizeGvk: {
	group?:   string @protobuf(1,string)
	version?: string @protobuf(2,string)
	kind?:    string @protobuf(3,string)
}

// KustomizeOptions are options for kustomize to use when building manifests
#KustomizeOptions: {
	// BuildOptions is a string of build parameters to use when calling `kustomize build`
	buildOptions?: string @protobuf(1,string)

	// BinaryPath holds optional path to kustomize binary
	binaryPath?: string @protobuf(2,string)
}

#KustomizePatch: {
	path?:   string             @protobuf(1,string)
	patch?:  string             @protobuf(2,string)
	target?: #KustomizeSelector @protobuf(3,KustomizeSelector)
	options?: {
		[string]: bool
	} @protobuf(4,map[string]bool)
}

#KustomizeReplica: {
	// Name of Deployment or StatefulSet
	name?: string @protobuf(1,string)

	// Number of replicas
	count?: intstr.#IntOrString @protobuf(2,.k8s.io.apimachinery.pkg.util.intstr.IntOrString)
}

#KustomizeResId: {
	gvk?:       #KustomizeGvk @protobuf(1,KustomizeGvk)
	name?:      string        @protobuf(2,string)
	namespace?: string        @protobuf(3,string)
}

#KustomizeSelector: {
	resId?:              #KustomizeResId @protobuf(1,KustomizeResId)
	annotationSelector?: string          @protobuf(2,string)
	labelSelector?:      string          @protobuf(3,string)
}

// ListGenerator include items info
#ListGenerator: {
	// +kubebuilder:validation:Optional
	elements?: [...v1_1.#JSON] @protobuf(1,.k8s.io.apiextensions_apiserver.pkg.apis.apiextensions.v1.JSON)
	template?:     #ApplicationSetTemplate @protobuf(2,ApplicationSetTemplate)
	elementsYaml?: string                  @protobuf(3,string)
}

#ManagedNamespaceMetadata: {
	labels?: {
		[string]: string
	} @protobuf(1,map[string]string)
	annotations?: {
		[string]: string
	} @protobuf(2,map[string]string)
}

// MatrixGenerator generates the cartesian product of two sets of parameters. The parameters are defined by two nested
// generators.
#MatrixGenerator: {
	generators?: [...#ApplicationSetNestedGenerator] @protobuf(1,ApplicationSetNestedGenerator)
	template?: #ApplicationSetTemplate @protobuf(2,ApplicationSetTemplate)
}

// MergeGenerator merges the output of two or more generators. Where the values for all specified merge keys are equal
// between two sets of generated parameters, the parameter sets will be merged with the parameters from the latter
// generator taking precedence. Parameter sets with merge keys not present in the base generator's params will be
// ignored.
// For example, if the first generator produced [{a: '1', b: '2'}, {c: '1', d: '1'}] and the second generator produced
// [{'a': 'override'}], the united parameters for merge keys = ['a'] would be
// [{a: 'override', b: '1'}, {c: '1', d: '1'}].
//
// MergeGenerator supports template overriding. If a MergeGenerator is one of multiple top-level generators, its
// template will be merged with the top-level generator before the parameters are applied.
#MergeGenerator: {
	generators?: [...#ApplicationSetNestedGenerator] @protobuf(1,ApplicationSetNestedGenerator)
	mergeKeys?: [...string] @protobuf(2,string)
	template?: #ApplicationSetTemplate @protobuf(3,ApplicationSetTemplate)
}

// NestedMatrixGenerator is a MatrixGenerator nested under another combination-type generator (MatrixGenerator or
// MergeGenerator). NestedMatrixGenerator does not have an override template, because template overriding has no meaning
// within the constituent generators of combination-type generators.
//
// NOTE: Nested matrix generator is not included directly in the CRD struct, instead it is included
// as a generic 'apiextensionsv1.JSON' object, and then marshalled into a NestedMatrixGenerator
// when processed.
#NestedMatrixGenerator: {
	generators?: [...#ApplicationSetTerminalGenerator] @protobuf(1,ApplicationSetTerminalGenerator)
}

// NestedMergeGenerator is a MergeGenerator nested under another combination-type generator (MatrixGenerator or
// MergeGenerator). NestedMergeGenerator does not have an override template, because template overriding has no meaning
// within the constituent generators of combination-type generators.
//
// NOTE: Nested merge generator is not included directly in the CRD struct, instead it is included
// as a generic 'apiextensionsv1.JSON' object, and then marshalled into a NestedMergeGenerator
// when processed.
#NestedMergeGenerator: {
	generators?: [...#ApplicationSetTerminalGenerator] @protobuf(1,ApplicationSetTerminalGenerator)
	mergeKeys?: [...string] @protobuf(2,string)
}

// Operation contains information about a requested or running operation
#Operation: {
	// Sync contains parameters for the operation
	sync?: #SyncOperation @protobuf(1,SyncOperation)

	// InitiatedBy contains information about who initiated the operations
	initiatedBy?: #OperationInitiator @protobuf(2,OperationInitiator)

	// Info is a list of informational items for this operation
	info?: [...#Info] @protobuf(3,Info)

	// Retry controls the strategy to apply if a sync fails
	retry?: #RetryStrategy @protobuf(4,RetryStrategy)
}

// OperationInitiator contains information about the initiator of an operation
#OperationInitiator: {
	// Username contains the name of a user who started operation
	username?: string @protobuf(1,string)

	// Automated is set to true if operation was initiated automatically by the application controller.
	automated?: bool @protobuf(2,bool)
}

// OperationState contains information about state of a running operation
#OperationState: {
	// Operation is the original requested operation
	operation?: #Operation @protobuf(1,Operation)

	// Phase is the current phase of the operation
	phase?: string @protobuf(2,string)

	// Message holds any pertinent messages when attempting to perform operation (typically errors).
	message?: string @protobuf(3,string)

	// SyncResult is the result of a Sync operation
	syncResult?: #SyncOperationResult @protobuf(4,SyncOperationResult)

	// StartedAt contains time of operation start
	startedAt?: v1.#Time @protobuf(6,.k8s.io.apimachinery.pkg.apis.meta.v1.Time)

	// FinishedAt contains time of operation completion
	finishedAt?: v1.#Time @protobuf(7,.k8s.io.apimachinery.pkg.apis.meta.v1.Time)

	// RetryCount contains time of operation retries
	retryCount?: int64 @protobuf(8,int64)
}

#OptionalArray: {
	// Array is the value of an array type parameter.
	// +optional
	array?: [...string] @protobuf(1,string)
}

#OptionalMap: {
	// Map is the value of a map type parameter.
	// +optional
	map?: {
		[string]: string
	} @protobuf(1,map[string]string)
}

// OrphanedResourceKey is a reference to a resource to be ignored from
#OrphanedResourceKey: {
	group?: string @protobuf(1,string)
	kind?:  string @protobuf(2,string)
	name?:  string @protobuf(3,string)
}

// OrphanedResourcesMonitorSettings holds settings of orphaned resources monitoring
#OrphanedResourcesMonitorSettings: {
	// Warn indicates if warning condition should be created for apps which have orphaned resources
	warn?: bool @protobuf(1,bool)

	// Ignore contains a list of resources that are to be excluded from orphaned resources monitoring
	ignore?: [...#OrphanedResourceKey] @protobuf(2,OrphanedResourceKey)
}

// OverrideIgnoreDiff contains configurations about how fields should be ignored during diffs between
// the desired state and live state
#OverrideIgnoreDiff: {
	// JSONPointers is a JSON path list following the format defined in RFC4627 (https://datatracker.ietf.org/doc/html/rfc6902#section-3)
	jSONPointers?: [...string] @protobuf(1,string)

	// JQPathExpressions is a JQ path list that will be evaludated during the diff process
	jqPathExpressions?: [...string] @protobuf(2,string)

	// ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the
	// desired state defined in the SCM and won't be displayed in diffs
	managedFieldsManagers?: [...string] @protobuf(3,string)
}

#PluginConfigMapRef: {
	// Name of the ConfigMap
	name?: string @protobuf(1,string)
}

// PluginGenerator defines connection info specific to Plugin.
#PluginGenerator: {
	configMapRef?: #PluginConfigMapRef @protobuf(1,PluginConfigMapRef)
	input?:        #PluginInput        @protobuf(2,PluginInput)

	// RequeueAfterSeconds determines how long the ApplicationSet controller will wait before reconciling the ApplicationSet again.
	requeueAfterSeconds?: int64                   @protobuf(3,int64)
	template?:            #ApplicationSetTemplate @protobuf(4,ApplicationSetTemplate)

	// Values contains key/value pairs which are passed directly as parameters to the template. These values will not be
	// sent as parameters to the plugin.
	values?: {
		[string]: string
	} @protobuf(5,map[string]string)
}

#PluginInput: {
	// Parameters contains the information to pass to the plugin. It is a map. The keys must be strings, and the
	// values can be any type.
	parameters?: {
		[string]: v1_1.#JSON
	} @protobuf(1,map[string].k8s.io.apiextensions_apiserver.pkg.apis.apiextensions.v1.JSON)
}

// ProjectRole represents a role that has access to a project
#ProjectRole: {
	// Name is a name for this role
	name?: string @protobuf(1,string)

	// Description is a description of the role
	description?: string @protobuf(2,string)

	// Policies Stores a list of casbin formatted strings that define access policies for the role in the project
	policies?: [...string] @protobuf(3,string)

	// JWTTokens are a list of generated JWT tokens bound to this role
	jwtTokens?: [...#JWTToken] @protobuf(4,JWTToken)

	// Groups are a list of OIDC group claims bound to this role
	groups?: [...string] @protobuf(5,string)
}

// PullRequestGenerator defines a generator that scrapes a PullRequest API to find candidate pull requests.
#PullRequestGenerator: {
	// Which provider to use and config for it.
	github?:          #PullRequestGeneratorGithub          @protobuf(1,PullRequestGeneratorGithub)
	gitlab?:          #PullRequestGeneratorGitLab          @protobuf(2,PullRequestGeneratorGitLab)
	gitea?:           #PullRequestGeneratorGitea           @protobuf(3,PullRequestGeneratorGitea)
	bitbucketServer?: #PullRequestGeneratorBitbucketServer @protobuf(4,PullRequestGeneratorBitbucketServer)

	// Filters for which pull requests should be considered.
	filters?: [...#PullRequestGeneratorFilter] @protobuf(5,PullRequestGeneratorFilter)

	// Standard parameters.
	requeueAfterSeconds?: int64                          @protobuf(6,int64)
	template?:            #ApplicationSetTemplate        @protobuf(7,ApplicationSetTemplate)
	bitbucket?:           #PullRequestGeneratorBitbucket @protobuf(8,PullRequestGeneratorBitbucket)

	// Additional provider to use and config for it.
	azuredevops?: #PullRequestGeneratorAzureDevOps @protobuf(9,PullRequestGeneratorAzureDevOps)
}

// PullRequestGeneratorAzureDevOps defines connection info specific to AzureDevOps.
#PullRequestGeneratorAzureDevOps: {
	// Azure DevOps org to scan. Required.
	organization?: string @protobuf(1,string)

	// Azure DevOps project name to scan. Required.
	project?: string @protobuf(2,string)

	// Azure DevOps repo name to scan. Required.
	repo?: string @protobuf(3,string)

	// The Azure DevOps API URL to talk to. If blank, use https://dev.azure.com/.
	api?: string @protobuf(4,string)

	// Authentication token reference.
	tokenRef?: #SecretRef @protobuf(5,SecretRef)

	// Labels is used to filter the PRs that you want to target
	labels?: [...string] @protobuf(6,string)
}

// PullRequestGeneratorBitbucket defines connection info specific to Bitbucket.
#PullRequestGeneratorBitbucket: {
	// Workspace to scan. Required.
	owner?: string @protobuf(1,string)

	// Repo name to scan. Required.
	repo?: string @protobuf(2,string)

	// The Bitbucket REST API URL to talk to. If blank, uses https://api.bitbucket.org/2.0.
	api?: string @protobuf(3,string)

	// Credentials for Basic auth
	basicAuth?: #BasicAuthBitbucketServer @protobuf(4,BasicAuthBitbucketServer)

	// Credentials for AppToken (Bearer auth)
	bearerToken?: #BearerTokenBitbucketCloud @protobuf(5,BearerTokenBitbucketCloud)
}

// PullRequestGeneratorBitbucketServer defines connection info specific to BitbucketServer.
#PullRequestGeneratorBitbucketServer: {
	// Project to scan. Required.
	project?: string @protobuf(1,string)

	// Repo name to scan. Required.
	repo?: string @protobuf(2,string)

	// The Bitbucket REST API URL to talk to e.g. https://bitbucket.org/rest Required.
	api?: string @protobuf(3,string)

	// Credentials for Basic auth
	basicAuth?: #BasicAuthBitbucketServer @protobuf(4,BasicAuthBitbucketServer)

	// Credentials for AccessToken (Bearer auth)
	bearerToken?: #BearerTokenBitbucket @protobuf(5,BearerTokenBitbucket)

	// Allow self-signed TLS / Certificates; default: false
	insecure?: bool @protobuf(6,bool)

	// ConfigMap key holding the trusted certificates
	caRef?: #ConfigMapKeyRef @protobuf(7,ConfigMapKeyRef)
}

// PullRequestGeneratorFilter is a single pull request filter.
// If multiple filter types are set on a single struct, they will be AND'd together. All filters must
// pass for a pull request to be included.
#PullRequestGeneratorFilter: {
	branchMatch?:       string @protobuf(1,string)
	targetBranchMatch?: string @protobuf(2,string)
}

// PullRequestGeneratorGitLab defines connection info specific to GitLab.
#PullRequestGeneratorGitLab: {
	// GitLab project to scan. Required.
	project?: string @protobuf(1,string)

	// The GitLab API URL to talk to. If blank, uses https://gitlab.com/.
	api?: string @protobuf(2,string)

	// Authentication token reference.
	tokenRef?: #SecretRef @protobuf(3,SecretRef)

	// Labels is used to filter the MRs that you want to target
	labels?: [...string] @protobuf(4,string)

	// PullRequestState is an additional MRs filter to get only those with a certain state. Default: "" (all states)
	pullRequestState?: string @protobuf(5,string)

	// Skips validating the SCM provider's TLS certificate - useful for self-signed certificates.; default: false
	insecure?: bool @protobuf(6,bool)

	// ConfigMap key holding the trusted certificates
	caRef?: #ConfigMapKeyRef @protobuf(7,ConfigMapKeyRef)
}

// PullRequestGeneratorGitea defines connection info specific to Gitea.
#PullRequestGeneratorGitea: {
	// Gitea org or user to scan. Required.
	owner?: string @protobuf(1,string)

	// Gitea repo name to scan. Required.
	repo?: string @protobuf(2,string)

	// The Gitea API URL to talk to. Required
	api?: string @protobuf(3,string)

	// Authentication token reference.
	tokenRef?: #SecretRef @protobuf(4,SecretRef)

	// Allow insecure tls, for self-signed certificates; default: false.
	insecure?: bool @protobuf(5,bool)
}

// PullRequestGenerator defines connection info specific to GitHub.
#PullRequestGeneratorGithub: {
	// GitHub org or user to scan. Required.
	owner?: string @protobuf(1,string)

	// GitHub repo name to scan. Required.
	repo?: string @protobuf(2,string)

	// The GitHub API URL to talk to. If blank, use https://api.github.com/.
	api?: string @protobuf(3,string)

	// Authentication token reference.
	tokenRef?: #SecretRef @protobuf(4,SecretRef)

	// AppSecretName is a reference to a GitHub App repo-creds secret with permission to access pull requests.
	appSecretName?: string @protobuf(5,string)

	// Labels is used to filter the PRs that you want to target
	labels?: [...string] @protobuf(6,string)
}

#RefTarget: {
	repo?:           #Repository @protobuf(1,Repository)
	targetRevision?: string      @protobuf(2,string)
	chart?:          string      @protobuf(3,string)
}

// RepoCreds holds the definition for repository credentials
#RepoCreds: {
	// URL is the URL to which these credentials match
	url?: string @protobuf(1,string)

	// Username for authenticating at the repo server
	username?: string @protobuf(2,string)

	// Password for authenticating at the repo server
	password?: string @protobuf(3,string)

	// SSHPrivateKey contains the private key data for authenticating at the repo server using SSH (only Git repos)
	sshPrivateKey?: string @protobuf(4,string)

	// TLSClientCertData specifies the TLS client cert data for authenticating at the repo server
	tlsClientCertData?: string @protobuf(5,string)

	// TLSClientCertKey specifies the TLS client cert key for authenticating at the repo server
	tlsClientCertKey?: string @protobuf(6,string)

	// GithubAppPrivateKey specifies the private key PEM data for authentication via GitHub app
	githubAppPrivateKey?: string @protobuf(7,string)

	// GithubAppId specifies the Github App ID of the app used to access the repo for GitHub app authentication
	githubAppID?: int64 @protobuf(8,int64)

	// GithubAppInstallationId specifies the ID of the installed GitHub App for GitHub app authentication
	githubAppInstallationID?: int64 @protobuf(9,int64)

	// GithubAppEnterpriseBaseURL specifies the GitHub API URL for GitHub app authentication. If empty will default to https://api.github.com
	githubAppEnterpriseBaseUrl?: string @protobuf(10,string)

	// EnableOCI specifies whether helm-oci support should be enabled for this repo
	enableOCI?: bool @protobuf(11,bool)

	// Type specifies the type of the repoCreds. Can be either "git" or "helm. "git" is assumed if empty or absent.
	type?: string @protobuf(12,string)

	// GCPServiceAccountKey specifies the service account key in JSON format to be used for getting credentials to Google Cloud Source repos
	gcpServiceAccountKey?: string @protobuf(13,string)

	// Proxy specifies the HTTP/HTTPS proxy used to access repos at the repo server
	proxy?: string @protobuf(19,string)

	// ForceHttpBasicAuth specifies whether Argo CD should attempt to force basic auth for HTTP connections
	forceHttpBasicAuth?: bool @protobuf(20,bool)

	// NoProxy specifies a list of targets where the proxy isn't used, applies only in cases where the proxy is applied
	noProxy?: string @protobuf(23,string)
}

// RepositoryList is a collection of Repositories.
#RepoCredsList: {
	metadata?: v1.#ListMeta @protobuf(1,.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)
	items?: [...#RepoCreds] @protobuf(2,RepoCreds)
}

// Repository is a repository holding application configurations
#Repository: {
	// Repo contains the URL to the remote repository
	repo?: string @protobuf(1,string)

	// Username contains the user name used for authenticating at the remote repository
	username?: string @protobuf(2,string)

	// Password contains the password or PAT used for authenticating at the remote repository
	password?: string @protobuf(3,string)

	// SSHPrivateKey contains the PEM data for authenticating at the repo server. Only used with Git repos.
	sshPrivateKey?: string @protobuf(4,string)

	// ConnectionState contains information about the current state of connection to the repository server
	connectionState?: #ConnectionState @protobuf(5,ConnectionState)

	// InsecureIgnoreHostKey should not be used anymore, Insecure is favoured
	// Used only for Git repos
	insecureIgnoreHostKey?: bool @protobuf(6,bool)

	// Insecure specifies whether the connection to the repository ignores any errors when verifying TLS certificates or SSH host keys
	insecure?: bool @protobuf(7,bool)

	// EnableLFS specifies whether git-lfs support should be enabled for this repo. Only valid for Git repositories.
	enableLfs?: bool @protobuf(8,bool)

	// TLSClientCertData contains a certificate in PEM format for authenticating at the repo server
	tlsClientCertData?: string @protobuf(9,string)

	// TLSClientCertKey contains a private key in PEM format for authenticating at the repo server
	tlsClientCertKey?: string @protobuf(10,string)

	// Type specifies the type of the repo. Can be either "git" or "helm. "git" is assumed if empty or absent.
	type?: string @protobuf(11,string)

	// Name specifies a name to be used for this repo. Only used with Helm repos
	name?: string @protobuf(12,string)

	// Whether credentials were inherited from a credential set
	inheritedCreds?: bool @protobuf(13,bool)

	// EnableOCI specifies whether helm-oci support should be enabled for this repo
	enableOCI?: bool @protobuf(14,bool)

	// Github App Private Key PEM data
	githubAppPrivateKey?: string @protobuf(15,string)

	// GithubAppId specifies the ID of the GitHub app used to access the repo
	githubAppID?: int64 @protobuf(16,int64)

	// GithubAppInstallationId specifies the installation ID of the GitHub App used to access the repo
	githubAppInstallationID?: int64 @protobuf(17,int64)

	// GithubAppEnterpriseBaseURL specifies the base URL of GitHub Enterprise installation. If empty will default to https://api.github.com
	githubAppEnterpriseBaseUrl?: string @protobuf(18,string)

	// Proxy specifies the HTTP/HTTPS proxy used to access the repo
	proxy?: string @protobuf(19,string)

	// Reference between project and repository that allows it to be automatically added as an item inside SourceRepos project entity
	project?: string @protobuf(20,string)

	// GCPServiceAccountKey specifies the service account key in JSON format to be used for getting credentials to Google Cloud Source repos
	gcpServiceAccountKey?: string @protobuf(21,string)

	// ForceHttpBasicAuth specifies whether Argo CD should attempt to force basic auth for HTTP connections
	forceHttpBasicAuth?: bool @protobuf(22,bool)

	// NoProxy specifies a list of targets where the proxy isn't used, applies only in cases where the proxy is applied
	noProxy?: string @protobuf(23,string)
}

// A RepositoryCertificate is either SSH known hosts entry or TLS certificate
#RepositoryCertificate: {
	// ServerName specifies the DNS name of the server this certificate is intended for
	serverName?: string @protobuf(1,string)

	// CertType specifies the type of the certificate - currently one of "https" or "ssh"
	certType?: string @protobuf(2,string)

	// CertSubType specifies the sub type of the cert, i.e. "ssh-rsa"
	certSubType?: string @protobuf(3,string)

	// CertData contains the actual certificate data, dependent on the certificate type
	certData?: bytes @protobuf(4,bytes)

	// CertInfo will hold additional certificate info, depdendent on the certificate type (e.g. SSH fingerprint, X509 CommonName)
	certInfo?: string @protobuf(5,string)
}

// RepositoryCertificateList is a collection of RepositoryCertificates
#RepositoryCertificateList: {
	metadata?: v1.#ListMeta @protobuf(1,.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)

	// List of certificates to be processed
	items?: [...#RepositoryCertificate] @protobuf(2,RepositoryCertificate)
}

// RepositoryList is a collection of Repositories.
#RepositoryList: {
	metadata?: v1.#ListMeta @protobuf(1,.k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta)
	items?: [...#Repository] @protobuf(2,Repository)
}

// TODO: describe this type
// TODO: describe members of this type
#ResourceAction: {
	name?: string @protobuf(1,string)
	params?: [...#ResourceActionParam] @protobuf(2,ResourceActionParam)
	disabled?:    bool   @protobuf(3,bool)
	iconClass?:   string @protobuf(4,string)
	displayName?: string @protobuf(5,string)
}

// TODO: describe this type
// TODO: describe members of this type
#ResourceActionDefinition: {
	name?:      string @protobuf(1,string)
	actionLua?: string @protobuf(2,string)
}

// TODO: describe this type
// TODO: describe members of this type
#ResourceActionParam: {
	name?:    string @protobuf(1,string)
	value?:   string @protobuf(2,string)
	type?:    string @protobuf(3,string)
	default?: string @protobuf(4,string)
}

// TODO: describe this type
// TODO: describe members of this type
#ResourceActions: {
	actionDiscoveryLua?: string @protobuf(1,string)
	definitions?: [...#ResourceActionDefinition] @protobuf(2,ResourceActionDefinition)
	mergeBuiltinActions?: bool @protobuf(3,bool)
}

// ResourceDiff holds the diff of a live and target resource object
// TODO: describe members of this type
#ResourceDiff: {
	group?:     string @protobuf(1,string)
	kind?:      string @protobuf(2,string)
	namespace?: string @protobuf(3,string)
	name?:      string @protobuf(4,string)

	// TargetState contains the JSON serialized resource manifest defined in the Git/Helm
	targetState?: string @protobuf(5,string)

	// TargetState contains the JSON live resource manifest
	liveState?: string @protobuf(6,string)

	// Diff contains the JSON patch between target and live resource
	// Deprecated: use NormalizedLiveState and PredictedLiveState to render the difference
	diff?: string @protobuf(7,string)
	hook?: bool   @protobuf(8,bool)

	// NormalizedLiveState contains JSON serialized live resource state with applied normalizations
	normalizedLiveState?: string @protobuf(9,string)

	// PredictedLiveState contains JSON serialized resource state that is calculated based on normalized and target resource state
	predictedLiveState?: string @protobuf(10,string)
	resourceVersion?:    string @protobuf(11,string)
	modified?:           bool   @protobuf(12,bool)
}

// ResourceIgnoreDifferences contains resource filter and list of json paths which should be ignored during comparison with live state.
#ResourceIgnoreDifferences: {
	group?:     string @protobuf(1,string)
	kind?:      string @protobuf(2,string)
	name?:      string @protobuf(3,string)
	namespace?: string @protobuf(4,string)
	jsonPointers?: [...string] @protobuf(5,string)
	jqPathExpressions?: [...string] @protobuf(6,string)

	// ManagedFieldsManagers is a list of trusted managers. Fields mutated by those managers will take precedence over the
	// desired state defined in the SCM and won't be displayed in diffs
	managedFieldsManagers?: [...string] @protobuf(7,string)
}

// ResourceNetworkingInfo holds networking resource related information
// TODO: describe members of this type
#ResourceNetworkingInfo: {
	targetLabels?: {
		[string]: string
	} @protobuf(1,map[string]string)
	targetRefs?: [...#ResourceRef] @protobuf(2,ResourceRef)
	labels?: {
		[string]: string
	} @protobuf(3,map[string]string)
	ingress?: [...v1_8.#LoadBalancerIngress] @protobuf(4,.k8s.io.api.core.v1.LoadBalancerIngress)

	// ExternalURLs holds list of URLs which should be available externally. List is populated for ingress resources using rules hostnames.
	externalURLs?: [...string] @protobuf(5,string)
}

// ResourceNode contains information about live resource and its children
// TODO: describe members of this type
#ResourceNode: {
	resourceRef?: #ResourceRef @protobuf(1,ResourceRef)
	parentRefs?: [...#ResourceRef] @protobuf(2,ResourceRef)
	info?: [...#InfoItem] @protobuf(3,InfoItem)
	networkingInfo?:  #ResourceNetworkingInfo @protobuf(4,ResourceNetworkingInfo)
	resourceVersion?: string                  @protobuf(5,string)
	images?: [...string] @protobuf(6,string)
	health?:    #HealthStatus @protobuf(7,HealthStatus)
	createdAt?: v1.#Time      @protobuf(8,.k8s.io.apimachinery.pkg.apis.meta.v1.Time)
}

// ResourceOverride holds configuration to customize resource diffing and health assessment
// TODO: describe the members of this type
#ResourceOverride: {
	healthLua?:             string              @protobuf(1,string)
	useOpenLibs?:           bool                @protobuf(5,bool)
	actions?:               string              @protobuf(3,string)
	ignoreDifferences?:     #OverrideIgnoreDiff @protobuf(2,OverrideIgnoreDiff)
	ignoreResourceUpdates?: #OverrideIgnoreDiff @protobuf(6,OverrideIgnoreDiff)
	knownTypeFields?: [...#KnownTypeField] @protobuf(4,KnownTypeField)
}

// ResourceRef includes fields which uniquely identify a resource
#ResourceRef: {
	group?:     string @protobuf(1,string)
	version?:   string @protobuf(2,string)
	kind?:      string @protobuf(3,string)
	namespace?: string @protobuf(4,string)
	name?:      string @protobuf(5,string)
	uid?:       string @protobuf(6,string)
}

// ResourceResult holds the operation result details of a specific resource
#ResourceResult: {
	// Group specifies the API group of the resource
	group?: string @protobuf(1,string)

	// Version specifies the API version of the resource
	version?: string @protobuf(2,string)

	// Kind specifies the API kind of the resource
	kind?: string @protobuf(3,string)

	// Namespace specifies the target namespace of the resource
	namespace?: string @protobuf(4,string)

	// Name specifies the name of the resource
	name?: string @protobuf(5,string)

	// Status holds the final result of the sync. Will be empty if the resources is yet to be applied/pruned and is always zero-value for hooks
	status?: string @protobuf(6,string)

	// Message contains an informational or error message for the last sync OR operation
	message?: string @protobuf(7,string)

	// HookType specifies the type of the hook. Empty for non-hook resources
	hookType?: string @protobuf(8,string)

	// HookPhase contains the state of any operation associated with this resource OR hook
	// This can also contain values for non-hook resources.
	hookPhase?: string @protobuf(9,string)

	// SyncPhase indicates the particular phase of the sync that this result was acquired in
	syncPhase?: string @protobuf(10,string)
}

// ResourceStatus holds the current sync and health status of a resource
// TODO: describe members of this type
#ResourceStatus: {
	group?:           string        @protobuf(1,string)
	version?:         string        @protobuf(2,string)
	kind?:            string        @protobuf(3,string)
	namespace?:       string        @protobuf(4,string)
	name?:            string        @protobuf(5,string)
	status?:          string        @protobuf(6,string)
	health?:          #HealthStatus @protobuf(7,HealthStatus)
	hook?:            bool          @protobuf(8,bool)
	requiresPruning?: bool          @protobuf(9,bool)
	syncWave?:        int64         @protobuf(10,int64)
}

// RetryStrategy contains information about the strategy to apply when a sync failed
#RetryStrategy: {
	// Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
	limit?: int64 @protobuf(1,int64)

	// Backoff controls how to backoff on subsequent retries of failed syncs
	backoff?: #Backoff @protobuf(2,Backoff)
}

// RevisionHistory contains history information about a previous sync
#RevisionHistory: {
	// Revision holds the revision the sync was performed against
	revision?: string @protobuf(2,string)

	// DeployedAt holds the time the sync operation completed
	deployedAt?: v1.#Time @protobuf(4,.k8s.io.apimachinery.pkg.apis.meta.v1.Time)

	// ID is an auto incrementing identifier of the RevisionHistory
	id?: int64 @protobuf(5,int64)

	// Source is a reference to the application source used for the sync operation
	source?: #ApplicationSource @protobuf(6,ApplicationSource)

	// DeployStartedAt holds the time the sync operation started
	deployStartedAt?: v1.#Time @protobuf(7,.k8s.io.apimachinery.pkg.apis.meta.v1.Time)

	// Sources is a reference to the application sources used for the sync operation
	sources?: [...#ApplicationSource] @protobuf(8,ApplicationSource)

	// Revisions holds the revision of each source in sources field the sync was performed against
	revisions?: [...string] @protobuf(9,string)

	// InitiatedBy contains information about who initiated the operations
	initiatedBy?: #OperationInitiator @protobuf(10,OperationInitiator)
}

// RevisionMetadata contains metadata for a specific revision in a Git repository
#RevisionMetadata: {
	// who authored this revision,
	// typically their name and email, e.g. "John Doe <john_doe@my-company.com>",
	// but might not match this example
	author?: string @protobuf(1,string)

	// Date specifies when the revision was authored
	date?: v1.#Time @protobuf(2,.k8s.io.apimachinery.pkg.apis.meta.v1.Time)

	// Tags specifies any tags currently attached to the revision
	// Floating tags can move from one revision to another
	tags?: [...string] @protobuf(3,string)

	// Message contains the message associated with the revision, most likely the commit message.
	message?: string @protobuf(4,string)

	// SignatureInfo contains a hint on the signer if the revision was signed with GPG, and signature verification is enabled.
	signatureInfo?: string @protobuf(5,string)
}

// SCMProviderGenerator defines a generator that scrapes a SCMaaS API to find candidate repos.
#SCMProviderGenerator: {
	// Which provider to use and config for it.
	github?:          #SCMProviderGeneratorGithub          @protobuf(1,SCMProviderGeneratorGithub)
	gitlab?:          #SCMProviderGeneratorGitlab          @protobuf(2,SCMProviderGeneratorGitlab)
	bitbucket?:       #SCMProviderGeneratorBitbucket       @protobuf(3,SCMProviderGeneratorBitbucket)
	bitbucketServer?: #SCMProviderGeneratorBitbucketServer @protobuf(4,SCMProviderGeneratorBitbucketServer)
	gitea?:           #SCMProviderGeneratorGitea           @protobuf(5,SCMProviderGeneratorGitea)
	azureDevOps?:     #SCMProviderGeneratorAzureDevOps     @protobuf(6,SCMProviderGeneratorAzureDevOps)

	// Filters for which repos should be considered.
	filters?: [...#SCMProviderGeneratorFilter] @protobuf(7,SCMProviderGeneratorFilter)

	// Which protocol to use for the SCM URL. Default is provider-specific but ssh if possible. Not all providers
	// necessarily support all protocols.
	cloneProtocol?: string @protobuf(8,string)

	// Standard parameters.
	requeueAfterSeconds?: int64                   @protobuf(9,int64)
	template?:            #ApplicationSetTemplate @protobuf(10,ApplicationSetTemplate)

	// Values contains key/value pairs which are passed directly as parameters to the template
	values?: {
		[string]: string
	} @protobuf(11,map[string]string)
	awsCodeCommit?: #SCMProviderGeneratorAWSCodeCommit @protobuf(12,SCMProviderGeneratorAWSCodeCommit)
}

// SCMProviderGeneratorAWSCodeCommit defines connection info specific to AWS CodeCommit.
#SCMProviderGeneratorAWSCodeCommit: {
	// TagFilters provides the tag filter(s) for repo discovery
	tagFilters?: [...#TagFilter] @protobuf(1,TagFilter)

	// Role provides the AWS IAM role to assume, for cross-account repo discovery
	// if not provided, AppSet controller will use its pod/node identity to discover.
	role?: string @protobuf(2,string)

	// Region provides the AWS region to discover repos.
	// if not provided, AppSet controller will infer the current region from environment.
	region?: string @protobuf(3,string)

	// Scan all branches instead of just the default branch.
	allBranches?: bool @protobuf(4,bool)
}

// SCMProviderGeneratorAzureDevOps defines connection info specific to Azure DevOps.
#SCMProviderGeneratorAzureDevOps: {
	// Azure Devops organization. Required. E.g. "my-organization".
	organization?: string @protobuf(5,string)

	// The URL to Azure DevOps. If blank, use https://dev.azure.com.
	api?: string @protobuf(6,string)

	// Azure Devops team project. Required. E.g. "my-team".
	teamProject?: string @protobuf(7,string)

	// The Personal Access Token (PAT) to use when connecting. Required.
	accessTokenRef?: #SecretRef @protobuf(8,SecretRef)

	// Scan all branches instead of just the default branch.
	allBranches?: bool @protobuf(9,bool)
}

// SCMProviderGeneratorBitbucket defines connection info specific to Bitbucket Cloud (API version 2).
#SCMProviderGeneratorBitbucket: {
	// Bitbucket workspace to scan. Required.
	owner?: string @protobuf(1,string)

	// Bitbucket user to use when authenticating.  Should have a "member" role to be able to read all repositories and branches.  Required
	user?: string @protobuf(2,string)

	// The app password to use for the user.  Required. See: https://support.atlassian.com/bitbucket-cloud/docs/app-passwords/
	appPasswordRef?: #SecretRef @protobuf(3,SecretRef)

	// Scan all branches instead of just the main branch.
	allBranches?: bool @protobuf(4,bool)
}

// SCMProviderGeneratorBitbucketServer defines connection info specific to Bitbucket Server.
#SCMProviderGeneratorBitbucketServer: {
	// Project to scan. Required.
	project?: string @protobuf(1,string)

	// The Bitbucket Server REST API URL to talk to. Required.
	api?: string @protobuf(2,string)

	// Credentials for Basic auth
	basicAuth?: #BasicAuthBitbucketServer @protobuf(3,BasicAuthBitbucketServer)

	// Scan all branches instead of just the default branch.
	allBranches?: bool @protobuf(4,bool)

	// Credentials for AccessToken (Bearer auth)
	bearerToken?: #BearerTokenBitbucket @protobuf(5,BearerTokenBitbucket)

	// Allow self-signed TLS / Certificates; default: false
	insecure?: bool @protobuf(6,bool)

	// ConfigMap key holding the trusted certificates
	caRef?: #ConfigMapKeyRef @protobuf(7,ConfigMapKeyRef)
}

// SCMProviderGeneratorFilter is a single repository filter.
// If multiple filter types are set on a single struct, they will be AND'd together. All filters must
// pass for a repo to be included.
#SCMProviderGeneratorFilter: {
	// A regex for repo names.
	repositoryMatch?: string @protobuf(1,string)

	// An array of paths, all of which must exist.
	pathsExist?: [...string] @protobuf(2,string)

	// An array of paths, all of which must not exist.
	pathsDoNotExist?: [...string] @protobuf(3,string)

	// A regex which must match at least one label.
	labelMatch?: string @protobuf(4,string)

	// A regex which must match the branch name.
	branchMatch?: string @protobuf(5,string)
}

// SCMProviderGeneratorGitea defines a connection info specific to Gitea.
#SCMProviderGeneratorGitea: {
	// Gitea organization or user to scan. Required.
	owner?: string @protobuf(1,string)

	// The Gitea URL to talk to. For example https://gitea.mydomain.com/.
	api?: string @protobuf(2,string)

	// Authentication token reference.
	tokenRef?: #SecretRef @protobuf(3,SecretRef)

	// Scan all branches instead of just the default branch.
	allBranches?: bool @protobuf(4,bool)

	// Allow self-signed TLS / Certificates; default: false
	insecure?: bool @protobuf(5,bool)
}

// SCMProviderGeneratorGithub defines connection info specific to GitHub.
#SCMProviderGeneratorGithub: {
	// GitHub org to scan. Required.
	organization?: string @protobuf(1,string)

	// The GitHub API URL to talk to. If blank, use https://api.github.com/.
	api?: string @protobuf(2,string)

	// Authentication token reference.
	tokenRef?: #SecretRef @protobuf(3,SecretRef)

	// AppSecretName is a reference to a GitHub App repo-creds secret.
	appSecretName?: string @protobuf(4,string)

	// Scan all branches instead of just the default branch.
	allBranches?: bool @protobuf(5,bool)
}

// SCMProviderGeneratorGitlab defines connection info specific to Gitlab.
#SCMProviderGeneratorGitlab: {
	// Gitlab group to scan. Required.  You can use either the project id (recommended) or the full namespaced path.
	group?: string @protobuf(1,string)

	// Recurse through subgroups (true) or scan only the base group (false).  Defaults to "false"
	includeSubgroups?: bool @protobuf(2,bool)

	// The Gitlab API URL to talk to.
	api?: string @protobuf(3,string)

	// Authentication token reference.
	tokenRef?: #SecretRef @protobuf(4,SecretRef)

	// Scan all branches instead of just the default branch.
	allBranches?: bool @protobuf(5,bool)

	// Skips validating the SCM provider's TLS certificate - useful for self-signed certificates.; default: false
	insecure?: bool @protobuf(6,bool)

	// When recursing through subgroups, also include shared Projects (true) or scan only the subgroups under same path (false).  Defaults to "true"
	includeSharedProjects?: bool @protobuf(7,bool)

	// Filter repos list based on Gitlab Topic.
	topic?: string @protobuf(8,string)

	// ConfigMap key holding the trusted certificates
	caRef?: #ConfigMapKeyRef @protobuf(9,ConfigMapKeyRef)
}

// Utility struct for a reference to a secret key.
#SecretRef: {
	secretName?: string @protobuf(1,string)
	key?:        string @protobuf(2,string)
}

// SignatureKey is the specification of a key required to verify commit signatures with
#SignatureKey: {
	// The ID of the key in hexadecimal notation
	keyID?: string @protobuf(1,string)
}

// SyncOperation contains details about a sync operation.
#SyncOperation: {
	// Revision is the revision (Git) or chart version (Helm) which to sync the application to
	// If omitted, will use the revision specified in app spec.
	revision?: string @protobuf(1,string)

	// Prune specifies to delete resources from the cluster that are no longer tracked in git
	prune?: bool @protobuf(2,bool)

	// DryRun specifies to perform a `kubectl apply --dry-run` without actually performing the sync
	dryRun?: bool @protobuf(3,bool)

	// SyncStrategy describes how to perform the sync
	syncStrategy?: #SyncStrategy @protobuf(4,SyncStrategy)

	// Resources describes which resources shall be part of the sync
	resources?: [...#SyncOperationResource] @protobuf(6,SyncOperationResource)

	// Source overrides the source definition set in the application.
	// This is typically set in a Rollback operation and is nil during a Sync operation
	source?: #ApplicationSource @protobuf(7,ApplicationSource)

	// Manifests is an optional field that overrides sync source with a local directory for development
	manifests?: [...string] @protobuf(8,string)

	// SyncOptions provide per-sync sync-options, e.g. Validate=false
	syncOptions?: [...string] @protobuf(9,string)

	// Sources overrides the source definition set in the application.
	// This is typically set in a Rollback operation and is nil during a Sync operation
	sources?: [...#ApplicationSource] @protobuf(10,ApplicationSource)

	// Revisions is the list of revision (Git) or chart version (Helm) which to sync each source in sources field for the application to
	// If omitted, will use the revision specified in app spec.
	revisions?: [...string] @protobuf(11,string)

	// SelfHealAttemptsCount contains the number of auto-heal attempts
	autoHealAttemptsCount?: int64 @protobuf(12,int64)
}

// SyncOperationResource contains resources to sync.
#SyncOperationResource: {
	group?:     string @protobuf(1,string)
	kind?:      string @protobuf(2,string)
	name?:      string @protobuf(3,string)
	namespace?: string @protobuf(4,string)
}

// SyncOperationResult represent result of sync operation
#SyncOperationResult: {
	// Resources contains a list of sync result items for each individual resource in a sync operation
	resources?: [...#ResourceResult] @protobuf(1,ResourceResult)

	// Revision holds the revision this sync operation was performed to
	revision?: string @protobuf(2,string)

	// Source records the application source information of the sync, used for comparing auto-sync
	source?: #ApplicationSource @protobuf(3,ApplicationSource)

	// Source records the application source information of the sync, used for comparing auto-sync
	sources?: [...#ApplicationSource] @protobuf(4,ApplicationSource)

	// Revisions holds the revision this sync operation was performed for respective indexed source in sources field
	revisions?: [...string] @protobuf(5,string)

	// ManagedNamespaceMetadata contains the current sync state of managed namespace metadata
	managedNamespaceMetadata?: #ManagedNamespaceMetadata @protobuf(6,ManagedNamespaceMetadata)
}

// SyncPolicy controls when a sync will be performed in response to updates in git
#SyncPolicy: {
	// Automated will keep an application synced to the target revision
	automated?: #SyncPolicyAutomated @protobuf(1,SyncPolicyAutomated)

	// Options allow you to specify whole app sync-options
	syncOptions?: [...string] @protobuf(2,string)

	// Retry controls failed sync retry behavior
	retry?: #RetryStrategy @protobuf(3,RetryStrategy)

	// ManagedNamespaceMetadata controls metadata in the given namespace (if CreateNamespace=true)
	managedNamespaceMetadata?: #ManagedNamespaceMetadata @protobuf(4,ManagedNamespaceMetadata)
}

// SyncPolicyAutomated controls the behavior of an automated sync
#SyncPolicyAutomated: {
	// Prune specifies whether to delete resources from the cluster that are not found in the sources anymore as part of automated sync (default: false)
	prune?: bool @protobuf(1,bool)

	// SelfHeal specifies whether to revert resources back to their desired state upon modification in the cluster (default: false)
	selfHeal?: bool @protobuf(2,bool)

	// AllowEmpty allows apps have zero live resources (default: false)
	allowEmpty?: bool @protobuf(3,bool)
}

// SyncStatus contains information about the currently observed live and desired states of an application
#SyncStatus: {
	// Status is the sync state of the comparison
	status?: string @protobuf(1,string)

	// ComparedTo contains information about what has been compared
	comparedTo?: #ComparedTo @protobuf(2,ComparedTo)

	// Revision contains information about the revision the comparison has been performed to
	revision?: string @protobuf(3,string)

	// Revisions contains information about the revisions of multiple sources the comparison has been performed to
	revisions?: [...string] @protobuf(4,string)
}

// SyncStrategy controls the manner in which a sync is performed
#SyncStrategy: {
	// Apply will perform a `kubectl apply` to perform the sync.
	apply?: #SyncStrategyApply @protobuf(1,SyncStrategyApply)

	// Hook will submit any referenced resources to perform the sync. This is the default strategy
	hook?: #SyncStrategyHook @protobuf(2,SyncStrategyHook)
}

// SyncStrategyApply uses `kubectl apply` to perform the apply
#SyncStrategyApply: {
	// Force indicates whether or not to supply the --force flag to `kubectl apply`.
	// The --force flag deletes and re-create the resource, when PATCH encounters conflict and has
	// retried for 5 times.
	force?: bool @protobuf(1,bool)
}

// SyncStrategyHook will perform a sync using hooks annotations.
// If no hook annotation is specified falls back to `kubectl apply`.
#SyncStrategyHook: {
	// Embed SyncStrategyApply type to inherit any `apply` options
	// +optional
	syncStrategyApply?: #SyncStrategyApply @protobuf(1,SyncStrategyApply)
}

// SyncWindow contains the kind, time, duration and attributes that are used to assign the syncWindows to apps
#SyncWindow: {
	// Kind defines if the window allows or blocks syncs
	kind?: string @protobuf(1,string)

	// Schedule is the time the window will begin, specified in cron format
	schedule?: string @protobuf(2,string)

	// Duration is the amount of time the sync window will be open
	duration?: string @protobuf(3,string)

	// Applications contains a list of applications that the window will apply to
	applications?: [...string] @protobuf(4,string)

	// Namespaces contains a list of namespaces that the window will apply to
	namespaces?: [...string] @protobuf(5,string)

	// Clusters contains a list of clusters that the window will apply to
	clusters?: [...string] @protobuf(6,string)

	// ManualSync enables manual syncs when they would otherwise be blocked
	manualSync?: bool @protobuf(7,bool)

	// TimeZone of the sync that will be applied to the schedule
	timeZone?: string @protobuf(8,string)
}

// TLSClientConfig contains settings to enable transport layer security
#TLSClientConfig: {
	// Insecure specifies that the server should be accessed without verifying the TLS certificate. For testing only.
	insecure?: bool @protobuf(1,bool)

	// ServerName is passed to the server for SNI and is used in the client to check server
	// certificates against. If ServerName is empty, the hostname used to contact the
	// server is used.
	serverName?: string @protobuf(2,string)

	// CertData holds PEM-encoded bytes (typically read from a client certificate file).
	// CertData takes precedence over CertFile
	certData?: bytes @protobuf(3,bytes)

	// KeyData holds PEM-encoded bytes (typically read from a client certificate key file).
	// KeyData takes precedence over KeyFile
	keyData?: bytes @protobuf(4,bytes)

	// CAData holds PEM-encoded bytes (typically read from a root certificates bundle).
	// CAData takes precedence over CAFile
	caData?: bytes @protobuf(5,bytes)
}

#TagFilter: {
	key?:   string @protobuf(1,string)
	value?: string @protobuf(2,string)
}

let string_5 = string

let string_A = string
